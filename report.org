#+title: EEEE2065 Coursework 4 Report
#+author: Tan Hong Kai - 20386501
#+email: ecyht2@nottingham.edu.my
#+OPTIONS: toc:nil
#+LATEX_HEADER: \setlength\parindent{0pt}

#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  (setq org-latex-title-command (concat
     "\\begin{titlepage}\n"
     "\\vspace*{5em}\n"
     "\\begin{center}\n"
     "\\includegraphics[scale=0.2]{./media/Nottingham.png}\n\n"
     "{\\Huge %t \\par }\n"
     "{\\vspace{1em}}\n"
     "{\\LARGE %s \\par }\n"
     "{\\vspace{1em}}\n"
     "{\\Large %a \\par}\n"
     "\\end{center}\n"
     "\\end{titlepage}\n"))
#+end_src

#+begin_export latex
  \clearpage \tableofcontents \clearpage
#+end_export

* Introduction
In this coursework, I am task to create a C++ program to determine if a given complex number is in the Mandelbrot set. A plot of numbers is then printed out to the standard output of which complex number is in the set on the complex plane.

#+caption: Mandelbrot set Fractal by Wolfgang Beyer with the program Ultra Fractal 3., CC BY-SA 3.0
#+attr_latex: scale=0.75
#+label: fig:mandelbrot-fractal
#+name: mandelbrot-fractal
[[./media/mandelbrot-fractal.jpg]]

This coursework is split into two different tasks. The first task is to create a [[Complex][Complex]] class that represents a complex number. Various mathematical operations are implemented in the class such as addition, subtraction, multiplication and exponents.

The second task is to create the [[Mandelbrot][Mandelbrot]] class itself. This class makes use of the [[Complex][Complex]] class to calculate weather a given complex number is within the set. It then repeats this process for many different complex numbers and make a plot out of it.

* Methodology
To complete the tasks, two classes were created to achieve it. The [[Complex][Complex]] class represents a complex number. It has overloaded operators to facilitate the mathematical operations needed to perform when calculating if it is in the Mandelbrot set. The [[Mandelbrot][Mandelbrot]] class represents a list of complex numbers that are within the Mandelbrot set.

** Complex
The [[Complex][Complex]] class has two private variables. These are used to store the real and imaginary part of the complex number. They are src_C++[:exports code]{double m_real} and src_C++[:exports code]{double m_imag}. These can be set using their respective setter and getter functions. src_C++[:exports code]{void setReal(double real)} and src_C++[:exports code]{double setReal(void)} sets and gets the real part while src_C++[:exports code]{void setImag(double imag)} and src_C++[:exports code]{double setImag(void)} sets and gets the imaginary part.

*** Constructors
The [[Complex][Complex]] class has two constructors. They are the default constructor src_C++[:exports code]{Complex(void)} and the parameterize constructor src_C++[:exports code]{Complex(double real, double imag, bool polar)}. The default constructor creates a [[Complex][Complex]] class with the real and imaginary part set to 0. The parameterize constructor creates a [[Complex][Complex]] class with the real and imaginary part specified by the user. The last parameter of the parameterize constructor specifies if the values given is in polar form or Cartesian form. By default, the polar parameter is set to src_C++[:exports code]{false} which indicates that it is in Cartesian form. However, when it is set to src_C++[:exports code]{true} the constructor would treat the first parameter as the magnitude of the complex number and the second parameter as the phase of the complex number (in radians) and determine the real and complex part using formulas.

*** Operators
Various mathematical operations are also implemented in the [[Complex][Complex]] class. There are two main ways this is implemented. The first one is through methods. Methods such as src_C++[:exports code]{void add(Complex c)}, src_C++[:exports code]{void sub(Complex c)}, src_C++[:exports code]{void mult(Complex c)}, src_C++[:exports code]{void div(Complex c)}, src_C++[:exports code]{void inv(void)} and src_C++[:exports code]{void square(void)} are provided to perform specific mathematical operations to the current class. These methods add, subtracts, multiply, divides, inverts and squares the current complex class by another [[Complex][Complex]] class or in the case of src_C++[:exports code]{inv()} and src_C++[:exports code]{square()} with itself. The second way is through overloaded operators. Operators "+", "-", "*", "/" and "^" are overloaded to return the addition, subtraction, multiplication, division and raising to the power of "n" of two [[Complex][Complex]] class.

*** Complex Number Properties
Complex numbers have different properties. Functions are created to retrieve these properties of the complex number. The most relevant property of a complex number would be the absolute value (magnitude) of the complex number. This is provided using the src_C++[:exports code]{double abs(void)} method. However, other properties such as the conjugate and the phase of the complex number is also supported even though it isn't needed for calculating the Mandelbrot set. These can be accessed using the method src_C++[:exports code]{double conjugate(void)} to get the conjugate of the complex number and src_C++[:exports code]{double phase(void)} to get the phase of the complex number.

*** Printing Complex class
To display the complex number, the user of the [[Complex][Complex]] class have three different ways of doing so. The first 2 way is through the src_C++[:exports code]{void print(void)} and it's overloaded counterpart src_C++[:exports code]{void print(std::string label)}. When called these methods would print the complex number with its real part and imaginary part in the form "{m\under{}real} + {m\under{}imag}j" where the text in the "{}" are to replaced with the appropriate private attributes. The overloaded src_C++[:exports code]{print()} function takes in a src_C++[:exports code]{std::string}, this will print the string before printing the complex number itself as a label. The third way of printing the [[Complex][Complex]] class would be using the overloaded src_C++[:exports code]{<<} operator with any output streams such as src_C++[:exports code]{std::cout}. Both of the src_C++[:exports code]{print()} methods uses this operator internally to print the [[Complex][Complex]] class.

** Mandelbrot
The [[Mandelbrot][Mandelbrot]] class has 12 private attributes. The src_C++[:exports code]{double xMin}, src_C++[:exports code]{double xStep} and src_C++[:exports code]{double xMax} attributes stores the range of x-elements (real elements) in the Mandelbrot set. While src_C++[:exports code]{double yMin}, src_C++[:exports code]{double yStep} and src_C++[:exports code]{double yMax} attributes stores the range of y-elements (imaginary elements) in the Mandelbrot set. The src_C++[:exports code]{unsigned int Nx} and src_C++[:exports code]{unsigned int Ny} variables stores the number of real and imaginary elements respectively. The src_C++[:exports code]{unsigned int max_iteration} stores the maximum iterations to determine if a given complex number is in the Mandelbrot set. The src_C++[:exports code]{char inSet} and src_C++[:exports code]{char outSet} are characters that will print when the number is in the set and out of the set respectively. Lastly the src_C++[:exports code]{int *MBS} private attribute stores the calculated array of Mandelbrot set. This is dynamically allocated based on the ranges given. A single dimension array is chosen over a 2D (since we have 2 axes) because a 1D array is easier to allocate and reallocate memory for.

*** Constructors and Destructors
The [[Mandelbrot][Mandelbrot]] class has two constructors and one destructor. The destructor is used to deallocate the src_C++[:exports code]{MBS} private variable to ensure there isn't any memory leak. One of the constructor is the default constructor src_C++[:exports code]{Mandelbrot(void)}. The default constructor creates a [[Mandelbrot][Mandelbrot]] class with src_C++[:exports code]{xMin = -2, xStep = 0.02, xMax = 1, yMin = -1, yStep = 0.02, yMax = 1}. The parameterize constructor src_C++[:exports code]{Mandelbrot(double xMin, double xStep, double xMax, double yMin, double yStep, double yMax)} creates a new [[Mandelbrot][Mandelbrot]] class with the real and imaginary axis specified by the parameters. The constructor will calculate the x and y-axis size and the Mandelbrot set after setting the range. However, the user can change the range at anytime using the src_C++[:exports code]{void setRange(double xMin, double xStep, double xMax, double yMin, double yStep, double yMax)} method. This will delete the current src_C++[:exports code]{MBS} variable, sets the range and recreate and calculates the src_C++[:exports code]{Nx, Ny} and src_C++[:exports code]{MBS} variable.

*** Printing Methods
There are two printing methods to print the calculated Mandelbrot set and the current range of the calculated Mandelbrot set. The src_C++[:exports code]{void printRange(void)} method prints the current range and number of elements of the real and imaginary axis. To print the Mandelbrot set plot, the user can use the src_C++[:exports code]{void printMBS(void)} method. The src_C++[:exports code]{printMBS()} method uses a double for loop where one loops over all x elements and one loops over the y elements. The index in the array for a given an x and y is $x + y * Nx$. The src_C++[:exports code]{inSet} character would be printed if the value at the index is src_C++[:exports code]{1} (in the set) while src_C++[:exports code]{outSet} would be printed if it is src_C++[:exports code]{0} (not in the set).

*** Calculation Methods
To calculate the src_C++[:exports code]{Nx} and src_C++[:exports code]{Ny}, a protected method src_C++[:exports code]{void calcNxNy(void)} is created. This is called when the user changes the range or when the [[Mandelbrot][Mandelbrot]] class is created. It sets the src_C++[:exports code]{Nx} and src_C++[:exports code]{Ny} to 1. Then, it loops from the minimum of the x/y-axis to the maximum and increases by the step size each time, incrementing the count by 1 each iteration. After calculating the src_C++[:exports code]{Nx} and src_C++[:exports code]{Ny}, the Mandelbrot set can be calculated by applying the formula $z = z^2 + c$. The method src_C++[:exports code]{void calcMBS(void)} calculates the Mandelbrot set array. Just like printing the set itself, it uses a double for loop. With each given x (real) and y (imaginary) value, a complex number of the corresponding point would be used as the $c$ in the Mandelbrot set equation. The initial $z$ of $0 + 0j$ is used and a boolean value of the current $c$ is the set is initialized (assumes it is in the set initially). Then the programs starts iterating for src_C++[:exports code]{max_iteration} amount of times. With each iteration the formula is applied and the magnitude of the new $z$ is tested to see if it is above $2$. The loop is stopped if the magnitude is greater than $2$ and the current $c$ is considered not in the set as no complex number with magnitude greater than $2$ can be in the Mandelbrot set. If the loop is never stopped, it indicates that the $c$ is in the set. The program then stores the membership of the current $c$ at it's corresponding index.

* Results
#+caption: Resultant Mandelbrot set plot calculated using the default constructor
#+label: fig:result
#+name: result
[[./media/result.png]]
